//import java.io.*;
import java.io.IOException;

import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;



public class variance{
	public static class Mapperx extends Mapper<LongWritable,Text,Text,FloatWritable>{
		public void map(FloatWritable key,Text value,Context context) 
//				throws IOException InterruptedException {
			try{
				String[] record=value.toString().split(",");
				
			String stockSymbol = record[1];
			Float high = Float.valueOf(record[4]);
			Float low = Float.valueOf(record[5]);
			Float Var = ((high-low) * 100) / low;
			context.write(new Text (stockSymbol), new FloatWritable(Var));
			
		}catch(Exception e){
			e.getMessage();
		}
		
		}
		public class VarReducer extends Reducer<FloatWritable,Text,Text,FloatWritable>{
			FloatWritable maxVal = new FloatWritable();
			public void reduce(Text Key, Iterable<FloatWritable> values,Context context)
			Float maxPercentValue=0;
			Float temp_val=0;
			
		}
	}
	maxvalue.set(maxPercentValue);
	context.write(key, maxVal);
}

public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    //conf.set("name", "value")
    Job job = Job.getInstance(conf, "Volume Count");
    job.setJarByClass(NYSEInput.class);
    job.setMapperClass(InputMapClass.class);
    job.setNumReduceTasks(0);
    job.setOutputKeyClass(LongWritable.class);
    job.setOutputValueClass(Text.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}